def modelFloatDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_02_22/mobilenet_v1_1.0_224.tgz"
def localCacheFloat = "build/intermediates/mobilenet_v1_1.0_224.tgz"
def targetFolder = "src/main/assets"
def addDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/acceleration_service/add.tflite"
def addTargetFile = "src/main/assets/add.tflite"

task downloadAddModel(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${addDownloadUrl}"
    }
    sourceUrl = "${addDownloadUrl}"
    target = file("${addTargetFile}")
}


task downloadModelFloat(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelFloatDownloadUrl}"
    }
    sourceUrl = "${modelFloatDownloadUrl}"
    target = file("${localCacheFloat}")
}

task unzipModelFloat(type: Copy, dependsOn: 'downloadModelFloat') {
    doFirst {
        println "Unzipping ${localCacheFloat}"
    }
    from tarTree("${localCacheFloat}")
    into "${targetFolder}"
}

task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModelFloat']) {
    delete fileTree("${targetFolder}").matching {
        include "*.pb"
        include "*.ckpt.*"
        include "*.pbtxt.*"
        include "*.meta"
    }
}


// Ensure the model file is downloaded and extracted before every build
preBuild.dependsOn downloadAddModel
preBuild.dependsOn cleanUnusedFiles

class DownloadUrlTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}
